generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_logs {
  id          String      @id
  tenantId    String
  userId      String?
  userEmail   String?
  userName    String?
  action      AuditAction
  entity      String
  entityId    String?
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())
  tenants     tenants     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([entity, entityId])
  @@index([tenantId, createdAt])
  @@index([tenantId])
  @@index([userId])
}

model categories {
  id               String       @id
  tenantId         String
  name             String
  description      String?
  parentId         String?
  color            String?
  icon             String?
  sortOrder        Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  categories       categories?  @relation("categoriesTocategories", fields: [parentId], references: [id])
  other_categories categories[] @relation("categoriesTocategories")
  tenants          tenants      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products         products[]

  @@index([parentId])
  @@index([tenantId])
  @@index([tenantId, sortOrder])
}

model customer_analytics {
  id                     String    @id
  customerId             String    @unique
  tenantId               String
  recencyScore           Int
  frequencyScore         Int
  monetaryScore          Int
  rfmSegment             String
  avgOrderValue          Float     @default(0)
  lastPurchaseDate       DateTime?
  daysSinceLastPurchase  Int?
  favoriteProducts       Json?
  preferredPaymentMethod String?
  avgVisitDuration       Int?
  churnRisk              Float?
  nextPurchasePrediction DateTime?
  lifetimeValue          Float?
  updatedAt              DateTime
  createdAt              DateTime  @default(now())

  @@index([churnRisk])
  @@index([rfmSegment])
  @@index([tenantId])
}

model customers {
  id            String   @id
  tenantId      String
  name          String
  email         String?
  phone         String?
  address       String?
  loyaltyPoints Int      @default(0)
  totalSpent    Float    @default(0)
  visitCount    Int      @default(0)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  tenants       tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders        orders[]

  @@index([email])
  @@index([phone])
  @@index([tenantId])
  @@index([tenantId, loyaltyPoints])
  @@index([tenantId, totalSpent])
}

model discounts {
  id              String       @id
  tenantId        String
  name            String
  code            String?
  type            DiscountType
  value           Float
  minimumPurchase Float?
  maxUses         Int?
  usedCount       Int          @default(0)
  isActive        Boolean      @default(true)
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  tenants         tenants      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders          orders[]

  @@index([code])
  @@index([isActive])
  @@index([tenantId])
  @@index([tenantId, isActive])
}

model employee_performance {
  id              String   @id
  userId          String
  tenantId        String
  periodStart     DateTime
  periodEnd       DateTime
  totalSales      Float    @default(0)
  orderCount      Int      @default(0)
  avgOrderValue   Float    @default(0)
  avgCheckoutTime Float?
  itemsPerOrder   Float?
  refundCount     Int      @default(0)
  discountGiven   Float    @default(0)
  hoursWorked     Float?
  salesPerHour    Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime

  @@index([tenantId])
  @@index([tenantId, periodStart])
  @@index([userId])
  @@index([userId, periodStart])
}

model inventory_alerts {
  id             String      @id
  tenantId       String
  productId      String
  productName    String
  currentStock   Int
  threshold      Int
  status         AlertStatus @default(PENDING)
  acknowledgedBy String?
  acknowledgedAt DateTime?
  resolvedAt     DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime
  tenants        tenants     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([status])
  @@index([tenantId])
  @@index([tenantId, status])
}

model inventory_forecasts {
  id               String   @id
  tenantId         String
  productId        String
  productName      String
  forecastDate     DateTime
  predictedDemand  Float
  confidence       Float
  avgDailySales    Float
  trend            String
  recommendedStock Int
  reorderPoint     Int?
  modelVersion     String?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime

  @@index([productId])
  @@index([tenantId, forecastDate])
  @@index([tenantId])
}

model locations {
  id            String   @id
  tenantId      String
  name          String
  address       String
  city          String?
  state         String?
  country       String   @default("USA")
  zipCode       String?
  phone         String?
  email         String?
  managerId     String?
  isActive      Boolean  @default(true)
  businessHours Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  tenants       tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, isActive])
}

model order_items {
  id        String   @id
  orderId   String
  productId String
  name      String
  price     Float
  quantity  Int
  modifiers Json?
  notes     String?
  subtotal  Float
  orders    orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products  products @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model orders {
  id              String        @id
  tenantId        String
  orderNumber     Int
  ticketId        String        @unique
  type            OrderType     @default(DINE_IN)
  status          OrderStatus   @default(PENDING)
  customerId      String?
  customerName    String?
  tableId         String?
  userId          String
  subtotal        Float
  tax             Float
  discount        Float         @default(0)
  total           Float
  discountId      String?
  notes           String?
  createdAt       DateTime      @default(now())
  completedAt     DateTime?
  cancelledAt     DateTime?
  cancelledBy     String?
  cancellationReason String?
  updatedAt       DateTime
  order_items     order_items[]
  customers       customers?    @relation(fields: [customerId], references: [id])
  discounts       discounts?    @relation(fields: [discountId], references: [id])
  tables          tables?       @relation(fields: [tableId], references: [id])
  tenants         tenants       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [userId], references: [id])
  payments        payments[]
  receipts        receipts?
  tips            tips[]

  @@index([createdAt])
  @@index([orderNumber, tenantId])
  @@index([status])
  @@index([tenantId, createdAt])
  @@index([tenantId])
  @@index([tenantId, status])
  @@index([ticketId])
  @@index([userId, createdAt])
}

model payments {
  id        String        @id
  orderId   String
  method    PaymentMethod
  amount    Float
  reference String?
  tendered  Float?
  change    Float?
  createdAt DateTime      @default(now())
  orders    orders        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([method])
  @@index([orderId])
}

model products {
  id            String        @id
  tenantId      String
  name          String
  description   String?
  sku           String?
  barcode       String?
  price         Float
  cost          Float?
  taxable       Boolean       @default(true)
  categoryId    String?
  trackStock    Boolean       @default(false)
  stock         Int           @default(0)
  lowStockAlert Int?
  image         String?
  modifiers     Json?
  isActive      Boolean       @default(true)
  isFavorite    Boolean       @default(false)
  createdById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  order_items   order_items[]
  categories    categories?   @relation(fields: [categoryId], references: [id])
  users         users         @relation(fields: [createdById], references: [id])
  tenants       tenants       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([barcode])
  @@index([categoryId])
  @@index([sku])
  @@index([tenantId, categoryId])
  @@index([tenantId])
  @@index([tenantId, isActive])
  @@index([trackStock, stock])
}

model qr_orders {
  id            String         @id
  tenantId      String
  tableId       String?
  qrCode        String         @unique
  customerName  String?
  customerPhone String?
  items         Json
  subtotal      Float
  tax           Float
  total         Float
  status        QROrderStatus  @default(PENDING)
  paid          Boolean        @default(false)
  paymentMethod PaymentMethod?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime

  @@index([qrCode])
  @@index([status])
  @@index([tenantId, createdAt])
  @@index([tenantId])
}

model receipts {
  id          String    @id
  tenantId    String
  orderId     String    @unique
  content     String
  printCount  Int       @default(0)
  lastPrinted DateTime?
  createdAt   DateTime  @default(now())
  orders      orders    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tenants     tenants   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
  @@index([tenantId])
}

model shifts {
  id           String    @id
  tenantId     String
  userId       String
  startTime    DateTime  @default(now())
  endTime      DateTime?
  openingCash  Float
  closingCash  Float?
  expectedCash Float?
  difference   Float?
  totalSales   Float?
  orderCount   Int?
  notes        String?
  createdAt    DateTime  @default(now())
  tenants      tenants   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users        users     @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([tenantId, startTime])
  @@index([userId])
  @@index([userId, startTime])
}

model subscriptions {
  id                     String             @id
  plan                   SubscriptionPlan   @default(BASIC)
  status                 SubscriptionStatus @default(TRIALING)
  stripeCustomerId       String?            @unique
  stripeSubscriptionId   String?            @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  amount                 Float
  currency               String             @default("USD")
  interval               String             @default("month")
  maxUsers               Int                @default(5)
  maxLocations           Int                @default(1)
  trialEnds              DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime
  tenants                tenants?
}

model super_admins {
  id        String   @id
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model tables {
  id        String      @id
  tenantId  String
  name      String
  capacity  Int
  status    TableStatus @default(AVAILABLE)
  positionX Float?
  positionY Float?
  createdAt DateTime    @default(now())
  updatedAt DateTime
  orders    orders[]
  tenants   tenants     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([tenantId])
}

model tenant_settings {
  id                   String   @id
  tenantId             String   @unique
  currency             String   @default("USD")
  currencySymbol       String   @default("$")
  timezone             String   @default("UTC")
  taxRate              Float    @default(0)
  taxName              String   @default("Tax")
  receiptFooter        String?
  receiptHeader        String?
  printAutomatic       Boolean  @default(false)
  printerIp            String?
  printerPort          Int?
  cashdrawerEnabled    Boolean  @default(false)
  enableKitchenDisplay Boolean  @default(false)
  enableInventory      Boolean  @default(true)
  enableTables         Boolean  @default(false)
  enableTakeaway       Boolean  @default(false)
  enableLoyalty        Boolean  @default(false)
  businessHours        Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  tenants              tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model tenants {
  id                   String                   @id
  name                 String
  subdomain            String                   @unique
  status               TenantStatus             @default(TRIAL)
  businessType         BusinessType             @default(RETAIL)
  businessTemplateId   String?
  email                String
  phone                String?
  address              String?
  logo                 String?
  primaryColor         String?
  subscriptionId       String?                  @unique
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime
  audit_logs           audit_logs[]
  categories           categories[]
  customers            customers[]
  discounts            discounts[]
  inventory_alerts     inventory_alerts[]
  locations            locations[]
  orders               orders[]
  products             products[]
  receipts             receipts[]
  shifts               shifts[]
  tables               tables[]
  tenant_settings      tenant_settings?
  subscriptions        subscriptions?           @relation(fields: [subscriptionId], references: [id])
  transactions         transactions[]
  users                users[]
  business_template    business_type_templates? @relation(fields: [businessTemplateId], references: [id])
  tenant_features      tenant_features[]

  @@index([createdAt])
  @@index([status])
  @@index([subdomain])
  @@index([businessTemplateId])
}

model time_entries {
  id         String        @id
  userId     String
  type       TimeEntryType
  timestamp  DateTime      @default(now())
  locationId String?
  notes      String?
  ipAddress  String?
  createdAt  DateTime      @default(now())
  users      users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([userId])
  @@index([userId, timestamp])
}

model tip_splits {
  id         String   @id
  tipId      String
  userId     String
  userName   String
  amount     Float
  percentage Float?
  createdAt  DateTime @default(now())
  tips       tips     @relation(fields: [tipId], references: [id], onDelete: Cascade)

  @@index([tipId])
  @@index([userId])
}

model tips {
  id         String        @id
  orderId    String
  amount     Float
  method     PaymentMethod @default(CASH)
  createdAt  DateTime      @default(now())
  tip_splits tip_splits[]
  orders     orders        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model transactions {
  id            String          @id
  tenantId      String
  type          TransactionType
  amount        Float
  description   String
  referenceId   String?
  referenceType String?
  metadata      Json?
  createdAt     DateTime        @default(now())
  tenants       tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([tenantId])
  @@index([type])
}

model user_invitations {
  id        String   @id
  email     String
  token     String   @unique
  role      UserRole
  tenantId  String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([token])
}

model users {
  id           String         @id
  email        String
  password     String
  name         String
  role         UserRole       @default(CASHIER)
  tenantId     String
  avatar       String?
  phone        String?
  isActive     Boolean        @default(true)
  permissions  Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  orders       orders[]
  products     products[]
  shifts       shifts[]
  time_entries time_entries[]
  tenants      tenants        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId])
  @@index([email])
  @@index([role])
  @@index([tenantId, createdAt])
  @@index([tenantId])
}

model feature_catalog {
  id                String              @id @default(cuid())
  featureKey        String              @unique
  name              String
  description       String
  category          FeatureCategory
  icon              String?
  requiresUpgrade   Boolean             @default(false)
  minimumPlan       SubscriptionPlan?
  dependsOn         Json?
  conflictsWith     Json?
  sortOrder         Int                 @default(0)
  isCore            Boolean             @default(false)
  isBeta            Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  template_features template_features[]
  tenant_features   tenant_features[]

  @@index([category])
  @@index([minimumPlan])
}

model business_type_templates {
  id                  String              @id @default(cuid())
  typeKey             String              @unique
  name                String
  displayName         String
  description         String
  category            BusinessCategory
  subcategory         String?
  hasDineIn           Boolean             @default(false)
  hasTakeaway         Boolean             @default(true)
  hasDelivery         Boolean             @default(false)
  hasKitchen          Boolean             @default(false)
  requiresTable       Boolean             @default(false)
  typicalOrderTime    Int?
  icon                String?
  color               String?
  imageUrl            String?
  isActive            Boolean             @default(true)
  isPopular           Boolean             @default(false)
  sortOrder           Int                 @default(0)
  tags                Json?
  recommendedPlan     SubscriptionPlan    @default(BASIC)
  expectedDailyOrders Int?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  template_features   template_features[]
  tenants             tenants[]

  @@index([category])
  @@index([isActive, isPopular])
}

model template_features {
  id                 String                  @id @default(cuid())
  templateId         String
  featureId          String
  isEnabledByDefault Boolean                 @default(true)
  isRecommended      Boolean                 @default(false)
  isRequired         Boolean                 @default(false)
  defaultConfig      Json?
  createdAt          DateTime                @default(now())
  template           business_type_templates @relation(fields: [templateId], references: [id], onDelete: Cascade)
  feature            feature_catalog         @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([templateId, featureId])
  @@index([templateId])
  @@index([featureId])
}

model tenant_features {
  id         String          @id @default(cuid())
  tenantId   String
  featureId  String
  isEnabled  Boolean         @default(true)
  enabledAt  DateTime?
  disabledAt DateTime?
  enabledBy  String?
  disabledBy String?
  config     Json?
  lastUsedAt DateTime?
  usageCount Int             @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  tenant     tenants         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feature    feature_catalog @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([tenantId, featureId])
  @@index([tenantId, isEnabled])
  @@index([featureId])
}

enum AlertStatus {
  PENDING
  ACKNOWLEDGED
  RESOLVED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PAYMENT
  REFUND
}

enum BusinessType {
  RETAIL
  RESTAURANT
  COFFEE_SHOP
  TAKEAWAY
  MIXED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  COUPON
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum PaymentMethod {
  CASH
  CARD
  DIGITAL_WALLET
  OTHER
}

enum QROrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum SubscriptionPlan {
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  TRIALING
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  TRIAL
  CANCELLED
}

enum TimeEntryType {
  CLOCK_IN
  CLOCK_OUT
  BREAK_START
  BREAK_END
}

enum TransactionType {
  SALE
  REFUND
  EXPENSE
  ADJUSTMENT
}

enum UserRole {
  BUSINESS_ADMIN
  MANAGER
  CASHIER
}

enum FeatureCategory {
  CORE_POS
  INVENTORY
  CUSTOMER_MANAGEMENT
  ORDER_MANAGEMENT
  TABLE_MANAGEMENT
  KITCHEN_OPERATIONS
  STAFF_MANAGEMENT
  PAYMENT_PROCESSING
  DISCOUNTS_PROMOTIONS
  MULTI_LOCATION
  ANALYTICS_REPORTS
  HARDWARE_INTEGRATION
  ONLINE_ORDERING
  DELIVERY_MANAGEMENT
  MARKETING
  COMPLIANCE_SECURITY
}

enum BusinessCategory {
  FOOD_SERVICE
  BEVERAGE
  RETAIL
  HOSPITALITY
  QUICK_SERVICE
  ENTERTAINMENT
  HEALTHCARE
  SERVICES
  OTHER
}
